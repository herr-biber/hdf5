#! /bin/sh
perl -x -S $0 "$@"
exit

#! perl
require 5.003;
use strict;

### Copyright © 1998 NCSA.
# Robb Matzke <matzke@llnl.gov>
# 17 July 1998

### Purpose
# Increments the hdf5 version number by changing the value of
# constants in the src/H5public.h file.  The new version number is
# printed on the standard output. An alternate source file name can be
# specified as an argument.  In any case, the original file is saved
# by appending a tilde `~' to the name.

### Usage:
# h5vers [OPTIONS] [FILE]

# Without options this program only displays the current version and
# doesn't modify any files or create backups.  The default is to print
# the version number like X.Y.Z-A where X is the major version number,
# Y is the minor version number, Z is the release number, and A is
# a short annotation string (the `-' is printed only if A is not empty).
# If the `-v' switch is given the version will be printed like:
#
#    version X.Y release Z (A)
#
# The space and parentheses around A are only printed if A is not empty.
#
# The `-s VERSION' switch will set the version as specified.  If the
# string contains a dotted triple then it will be used as the version
# number, otherwise up to three numbers will be read from the end of
# the string and used as the major version, minor version, and release
# number.  If any numbers are missing then zero is assumed.  This
# allows versions to be specified like `-s "version 2.1 release 8"' or
# `-s hdf5-2.1.8.tar.bz2'.  If the new version is less than the old
# version then a warning message is generated on standard error. The
# annotation string, A, is set only if it appears immediately after the
# third number, separated by a dash (e.g., `1.2.3-pre1') or in parentheses
# (e.g., `version 1.2 release 3 (pre1)').
#
# The `-i [major|minor|release|annot|last]' option increments the major
# number, minor number, release number, or annotation string. The `last'
# switch increments the annotation string if present, otherwise the
# release number. If the release number is incremented then the annotation
# string is cleared.  If the minor number is incremented then the release
# number is set to zero and the annotation string is cleared; if the major
# number is incremented then the minor and release numbers are set to zero
# and the annotation string is cleared.
#
# If a file is specified then that file is used instead of
# ./H5public.h or ./src/H5public.h.
#
# If the version number is changed (either `-s' or `-i' was used on
# the command line) then the first line of the README.txt and RELEASE.txt files
# one directory above the H5public.h file is also modified so it looks
# something like: This is hdf5-1.2.3-pre1 currently under development.
##############################################################################

sub getvers {
  local ($_) = @_;
  my (@vers);

  ($vers[0]) = /^\#\s*define\s+H5_VERS_MAJOR\s+(\d+)/m;
  ($vers[1]) = /^\#\s*define\s+H5_VERS_MINOR\s+(\d+)/m;
  ($vers[2]) = /^\#\s*define\s+H5_VERS_RELEASE\s+(\d+)/m;
  ($vers[3]) = /^\#\s*define\s+H5_VERS_SUBRELEASE\s+\"([^\"]*)\"/m;
  return @vers;
}

sub setvers {
  my ($contents, @vers) = @_;
  $_[0] =~ s/^(\#\s*define\s+H5_VERS_MAJOR\s+)\d+/$1$vers[0]/m;
  $_[0] =~ s/^(\#\s*define\s+H5_VERS_MINOR\s+)\d+/$1$vers[1]/m;
  $_[0] =~ s/^(\#\s*define\s+H5_VERS_RELEASE\s+)\d+/$1$vers[2]/m;
  $_[0] =~ s/^(\#\s*define\s+H5_VERS_SUBRELEASE\s+\")[^\"]*/$1$vers[3]/m;
  $_[0] =~ s/^(\#\s*define\s+H5_VERS_INFO\s+\")[^\"]*/
    sprintf("%sHDF5 library version: %d.%d.%d%s%s", $1, @vers[0,1,2],
	    $vers[3]?"-":"", $vers[3])/me;
}

sub usage {
  my ($prog) = $0 =~ /([^\/]+)$/;
  print STDERR <<EOF;
Usage: $prog [OPTS] [FILE]
    -i major|minor|release|annot
        Increment specified version component and set following components
        to zero.
    -s VERSION
        Set the version as specified. The version number can be embedded in
        some other string such as \"hdf5-1.1.0-pre1.tar.bz2\" or even
        \"this is HDF5 library version 1.1 release 0 (pre1)\" for convenience.
    -v
        Instead of displaying only a dotted triple version number a line such
        as \"version 1.1 release 0 (pre1)\" will be printed.
    FILE
        The name of the file that contains version information.  This is
        seldom necessary since files H5public.h, src/H5public.h and
        ../src/H5public.h are automatically checked.
EOF
  exit 1;
}

# Parse arguments
my ($verbose, $set, $inc, $file);
my (@files) = ("H5public.h", "src/H5public.h", "../src/H5public.h");
while ($_ = shift) {
  $_ eq "-s" && do {
    die "-s switch needs a version number\n" unless @ARGV;
    $set = shift;
    next;
  };

  $_ eq "-i" && do {
    if (@ARGV && $ARGV[0]=~/^(major|minor|release|annot)$/) {
      $inc = shift;
    } else {
      $inc = "last";
    }
    next;
  };

  $_ eq "-v" && do {
    $verbose = 1;
    next;
  };

  /^-(h|\?|-?help)$/ && usage;
  /^-/ && die "unrecognized option: $_\n";
  die "only one file name can be specified\n" if $file;
  $file = $_;
}
die "mutually exclusive options given\n" if $set && $inc;

# Determine file to use as H5public.h, README.txt and release_docs/RELEASE.txt.
# The README.txt and release_docs/RELEASE.txt files are always in the
# directory above H5public.h
unless ($file) {
  for (@files) {
    ($file=$_,last) if -f $_;
  }
}
die "unable to find source files\n" unless defined $file;
die "unable to read file: $file\n" unless -r $file;
# README.txt
my $README = $file;
$README =~ s/[^\/]*$/..\/README.txt/;
die "unable to read file: $README\n" unless -r $file;
# release_docs/RELEASE.txt
my $RELEASE = $file;
$RELEASE =~ s/[^\/]*$/..\/release_docs\/RELEASE.txt/;
die "unable to read file: $RELEASE\n" unless -r $file;

# Get the current version number.
open FILE, $file or die "unable to open $file: $!\n";
my ($contents) = join "", <FILE>;
close FILE;
my (@curver) = getvers $contents;

# Determine the new version number.
my @newver; #new version
if ($set) {
  if ($set =~ /(\d+)\.(\d+)\.(\d+)(-([a-zA-Z]\w*))?/) {
    @newver = ($1, $2, $3, $5);
  } elsif ($set =~ /(\d+)\D+(\d+)\D+(\d+)(\s*\(([a-zA-Z]\w*)\))?\D*$/) {
    @newver = ($1, $2, $3, $5);
  } elsif ($set =~ /(\d+)\D+(\d+)\D*$/) {
    @newver = ($1, $2, 0, "");
  } elsif ($set =~ /(\d+)\D*$/) {
    @newver = ($1, 0, 0, "");
  } else {
    die "illegal version number specified: $set\n";
  }
} elsif ($inc) {
  $inc = $curver[3] eq "" ? 'release' : 'annot' if $inc eq 'last';
  if ($inc eq "major") {
    $newver[0] = $curver[0]+1;
    @newver[1,2,3] = (0,0,"");
  } elsif ($inc eq "minor") {
    $newver[0] = $curver[0];
    $newver[1] = $curver[1]+1;
    @newver[2,3] = (0,"");
  } elsif ($inc eq "release") {
    @newver[0,1] = @curver[0,1];
    $newver[2] = $curver[2]+1;
    $newver[3] = "";
  } elsif ($inc eq "annot") {
    @newver[0,1,2] = @curver[0,1,2];
    $newver[3] = $curver[3];
    $newver[3] =~ s/(\d+)\D*$/$1+1/e or
      die "Annotation \"".$newver[3]."\" cannot be incremented.\n";
  } else {
    die "unknown increment field: $inc\n";
  }
} else {
  # Nothing to do but print result
  $README = "";
  $RELEASE = "";
  @newver = @curver;
}

# Print a warning if the version got smaller (don't check annot field)
if ($newver[0]*1000000 + $newver[1]*1000 + $newver[2] <
    $curver[0]*1000000 + $curver[1]*1000 + $curver[2]) {
  printf STDERR "Warning: version decreased from %d.%d.%d to %d.%d.%d\n",
    @curver[0,1,2], @newver[0,1,2];
}

# Update the version number if it changed.
if ($newver[0]!=$curver[0] ||
    $newver[1]!=$curver[1] ||
    $newver[2]!=$curver[2] ||
    $newver[3]ne$curver[3]) {
  setvers $contents, @newver or die "unable to set version\n";
  rename $file, "$file~" or die "unable to save backup file\n";
  open FILE, ">$file" or die "unable to open $file but backup saved!\n";
  print FILE $contents;
  close FILE;
}

# Update the README.txt file
if ($README) {
  open FILE, $README or die "$README: $!\n";
  my @contents = <FILE>;
  close FILE;
  $contents[0] = sprintf("HDF5 version %d.%d.%d%s %s",
			 @newver[0,1,2],
			 $newver[3] eq "" ? "" : "-".$newver[3],
			 "currently under development\n");
  open FILE, ">$README" or die "$README: $!\n";
  print FILE @contents;
  close FILE;
}

# Update the release_docs/RELEASE.txt file
if ($RELEASE) {
  open FILE, $RELEASE or die "$RELEASE: $!\n";
  my @contents = <FILE>;
  close FILE;
  $contents[0] = sprintf("HDF5 version %d.%d.%d%s %s",
			 @newver[0,1,2],
			 $newver[3] eq "" ? "" : "-".$newver[3],
			 "currently under development\n");
  open FILE, ">$RELEASE" or die "$RELEASE: $!\n";
  print FILE @contents;
  close FILE;
}

# Print the new version number
if ($verbose) {
  printf("version %d.%d release %d%s\n", @newver[0,1,2],
	 $newver[3] eq "" ? "" : " (".$newver[3].")");
} else {
  printf("%d.%d.%d%s\n", @newver[0,1,2],
	 $newver[3] eq "" ? "" : "-".$newver[3]);
}

exit 0;

# Because the first line of this file looks like a Bourne shell script, we
# must tell XEmacs explicitly that this is really a perl script.
#
# Local Variables:
# mode:perl
# End:
